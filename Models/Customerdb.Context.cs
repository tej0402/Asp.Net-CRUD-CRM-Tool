//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Customer.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class customerdbEntities2 : DbContext
    {
        public customerdbEntities2()
            : base("name=customerdbEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerFollowup> CustomerFollowups { get; set; }
    
        public virtual int DeleteCustomerdb(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomerdb", customerIdParameter);
        }
    
        public virtual ObjectResult<GetCustomerdb_Result> GetCustomerdb(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerdb_Result>("GetCustomerdb", customerIdParameter);
        }
    
        public virtual int SaveCustomerdb(string firstName, string lastName, Nullable<int> gender, Nullable<System.DateTime> doB, string email, string phoneNumber, string address, string city, string state, string pincode, Nullable<System.DateTime> createdDate, string imagePath)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var doBParameter = doB.HasValue ?
                new ObjectParameter("DoB", doB) :
                new ObjectParameter("DoB", typeof(System.DateTime));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveCustomerdb", firstNameParameter, lastNameParameter, genderParameter, doBParameter, emailParameter, phoneNumberParameter, addressParameter, cityParameter, stateParameter, pincodeParameter, createdDateParameter, imagePathParameter);
        }
    
        public virtual int UpdateCustomerdb(Nullable<int> customerId, string firstName, string lastName, Nullable<int> gender, Nullable<System.DateTime> doB, string email, string phoneNumber, string address, string city, string state, string pincode, Nullable<System.DateTime> createdDate, string imagePath)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var doBParameter = doB.HasValue ?
                new ObjectParameter("DoB", doB) :
                new ObjectParameter("DoB", typeof(System.DateTime));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomerdb", customerIdParameter, firstNameParameter, lastNameParameter, genderParameter, doBParameter, emailParameter, phoneNumberParameter, addressParameter, cityParameter, stateParameter, pincodeParameter, createdDateParameter, imagePathParameter);
        }
    
        public virtual int CustomerFollowUpsDelete(Nullable<int> followUpId)
        {
            var followUpIdParameter = followUpId.HasValue ?
                new ObjectParameter("FollowUpId", followUpId) :
                new ObjectParameter("FollowUpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerFollowUpsDelete", followUpIdParameter);
        }
    
        public virtual ObjectResult<CustomerFollowUpsGet_Result> CustomerFollowUpsGet(Nullable<int> followUpId, Nullable<int> customerId)
        {
            var followUpIdParameter = followUpId.HasValue ?
                new ObjectParameter("FollowUpId", followUpId) :
                new ObjectParameter("FollowUpId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerFollowUpsGet_Result>("CustomerFollowUpsGet", followUpIdParameter, customerIdParameter);
        }
    
        public virtual int CustomerFollowUpsInsert(Nullable<System.DateTime> followUpDate, Nullable<int> followUpType, string comments, Nullable<int> status, Nullable<System.DateTime> nextFollowUpDate, Nullable<System.DateTime> createdDate, Nullable<int> customerId)
        {
            var followUpDateParameter = followUpDate.HasValue ?
                new ObjectParameter("FollowUpDate", followUpDate) :
                new ObjectParameter("FollowUpDate", typeof(System.DateTime));
    
            var followUpTypeParameter = followUpType.HasValue ?
                new ObjectParameter("FollowUpType", followUpType) :
                new ObjectParameter("FollowUpType", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var nextFollowUpDateParameter = nextFollowUpDate.HasValue ?
                new ObjectParameter("NextFollowUpDate", nextFollowUpDate) :
                new ObjectParameter("NextFollowUpDate", typeof(System.DateTime));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerFollowUpsInsert", followUpDateParameter, followUpTypeParameter, commentsParameter, statusParameter, nextFollowUpDateParameter, createdDateParameter, customerIdParameter);
        }
    
        public virtual int CustomerFollowUpsUpdate(Nullable<int> followUpId, Nullable<int> customerId, Nullable<System.DateTime> followUpDate, Nullable<int> followUpType, string comments, Nullable<int> status, Nullable<System.DateTime> nextFollowUpDate, Nullable<System.DateTime> createdDate)
        {
            var followUpIdParameter = followUpId.HasValue ?
                new ObjectParameter("FollowUpId", followUpId) :
                new ObjectParameter("FollowUpId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var followUpDateParameter = followUpDate.HasValue ?
                new ObjectParameter("FollowUpDate", followUpDate) :
                new ObjectParameter("FollowUpDate", typeof(System.DateTime));
    
            var followUpTypeParameter = followUpType.HasValue ?
                new ObjectParameter("FollowUpType", followUpType) :
                new ObjectParameter("FollowUpType", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var nextFollowUpDateParameter = nextFollowUpDate.HasValue ?
                new ObjectParameter("NextFollowUpDate", nextFollowUpDate) :
                new ObjectParameter("NextFollowUpDate", typeof(System.DateTime));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerFollowUpsUpdate", followUpIdParameter, customerIdParameter, followUpDateParameter, followUpTypeParameter, commentsParameter, statusParameter, nextFollowUpDateParameter, createdDateParameter);
        }
    
        public virtual int CustomerFollowUpsStatus(Nullable<int> followUpId, Nullable<int> status)
        {
            var followUpIdParameter = followUpId.HasValue ?
                new ObjectParameter("FollowUpId", followUpId) :
                new ObjectParameter("FollowUpId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerFollowUpsStatus", followUpIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<Customer> SearchCustomers(string firstName, string lastName)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer>("SearchCustomers", firstNameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<Customer> SearchCustomers(string firstName, string lastName, MergeOption mergeOption)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer>("SearchCustomers", mergeOption, firstNameParameter, lastNameParameter);
        }
    }
}
